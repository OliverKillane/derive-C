include(FetchContent)

# Coverage
# - Only setup for clang, testing done with clang for better sanitizer support
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  option(COVERAGE "Enable code coverage instrumentation" ON)
else()
  # Define it in the cache but hard-set to OFF so user can't override
  set(COVERAGE OFF CACHE BOOL "Enable code coverage instrumentation" FORCE)
endif()

if(COVERAGE)
    set(COVERAGE_FLAGS
        -fprofile-instr-generate
        -fcoverage-mapping
    )
    add_compile_options(${COVERAGE_FLAGS})
    add_link_options(${COVERAGE_FLAGS})
    message(STATUS "Enabling Clang/LLVM coverage flags")
endif()

# JUSTIFY: Deprecated declarations off
#  - Rapidcheck contains cpp23 deprecated features
add_compile_options(-Wno-deprecated-declarations)

# Externals
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG v1.14.0
)
FetchContent_MakeAvailable(googletest)

set(RC_ENABLE_GTEST ON CACHE BOOL "Rapidcheck GTest Support" FORCE)
FetchContent_Declare(
  rapidcheck
  GIT_REPOSITORY https://github.com/emil-e/rapidcheck.git
  GIT_TAG ff6af6fc683159deb51c543b065eba14dfcf329b # Latest as of 3/30/2025
)
FetchContent_MakeAvailable(rapidcheck)

include(GoogleTest)

# Tests
# JUSTIFY: Test per cpp executable
#  - To be able to build tests in parallel, so a binary per structure/test suite.
file(GLOB_RECURSE TEST_CPP_FILES CONFIGURE_DEPENDS test.cpp fuzz.cpp)
set(ALL_TEST_EXECUTABLES)

foreach(TEST_FILE ${TEST_CPP_FILES})
  file(RELATIVE_PATH REL_PATH ${CMAKE_CURRENT_SOURCE_DIR} ${TEST_FILE})
  string(REPLACE "/" "_" TEST_TARGET_SAFE ${REL_PATH})
  get_filename_component(test_hierarchy "${REL_PATH}" DIRECTORY)

  add_executable(${TEST_TARGET_SAFE} ${TEST_FILE})
  set_target_properties(${TEST_TARGET_SAFE} PROPERTIES 
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
    OUTPUT_NAME "${TEST_TARGET_SAFE}"
  )
  target_compile_definitions(${TEST_TARGET_SAFE} PRIVATE ENABLE_MOCKING)
  target_link_libraries(${TEST_TARGET_SAFE}
    PRIVATE
      derivec
      derivecpp
      gtest
      gmock
      gtest_main
      rapidcheck
      rapidcheck_gtest
  )

  gtest_discover_tests(${TEST_TARGET_SAFE}
    TEST_PREFIX "tests/${test_hierarchy}/"
    DISCOVERY_TIMEOUT 30
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    PROPERTIES LABELS "correctness"
    ENVIRONMENT
      "RC_PARAMS=max_success=20000"
  )

  list(APPEND ALL_TEST_EXECUTABLES ${TEST_TARGET_SAFE})
endforeach()

if(COVERAGE)
  find_program(LLVM_COV_EXECUTABLE NAMES llvm-cov)
  find_program(LLVM_PROFDATA_EXECUTABLE NAMES llvm-profdata)

  set(COVERAGE_OBJECTS)
  foreach(TEST_EXEC ${ALL_TEST_EXECUTABLES})
    list(APPEND COVERAGE_OBJECTS "--object=${CMAKE_CURRENT_BINARY_DIR}/${TEST_EXEC}")
  endforeach()

  set(COVERAGE_DIR ${CMAKE_BINARY_DIR}/coverage)
  set(COVERAGE_ARGS
    --instr-profile=${COVERAGE_DIR}/coverage.profdata
    "--ignore-filename-regex=(^|.*/)(test|build)/.*" # Regex not cmake syntax
  )

  if(LLVM_COV_EXECUTABLE AND LLVM_PROFDATA_EXECUTABLE)
    add_custom_target(coverage
      DEPENDS ${ALL_TEST_EXECUTABLES}
      COMMENT "üîç Running llvm-cov ‚Üí HTML coverage report (Clang/LLVM)"
      WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
      COMMAND ${CMAKE_COMMAND} -E remove_directory ${COVERAGE_DIR}
      COMMAND ${CMAKE_COMMAND} -E make_directory ${COVERAGE_DIR}
      COMMAND ${CMAKE_COMMAND} 
        -E env 
          LLVM_PROFILE_FILE=${COVERAGE_DIR}/coverage_%p_%m.profraw 
        ${CMAKE_CTEST_COMMAND} 
          -L correctness 
          -j
          --output-on-failure
      
      # JUSTIFY: Shell scripting from cmake
      #  - We need to collect multiple files (wth names generated by the previous command - 
      #    not available at cmake configure time).
      #  - cmake cannot do `*` patterns itself, a fully platform agnostic way requires generating 
      #    an additional with a cmake list, this is much more complex.
      #  Hence we are shell dependent here
      COMMAND /bin/sh -c "${LLVM_PROFDATA_EXECUTABLE} merge -sparse ${COVERAGE_DIR}/*.profraw -o ${COVERAGE_DIR}/coverage.profdata"
      
      COMMAND ${LLVM_COV_EXECUTABLE} 
        report 
        ${COVERAGE_OBJECTS} 
        ${COVERAGE_ARGS}
      
      COMMAND ${LLVM_COV_EXECUTABLE} 
        show
        ${COVERAGE_OBJECTS}
        ${COVERAGE_ARGS}
        --format=html
        --show-branches=count
        --show-line-counts
        --show-regions
        --output-dir=coverage_html
      COMMENT "Running tests and generating coverage report (clang)"
      VERBATIM
      USES_TERMINAL
    )
  endif()
endif()
